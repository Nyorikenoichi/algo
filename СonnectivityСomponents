#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

long a[1001][1001], p[1001], v, r, x, y, i, j;

vector <long> g[1001];
// размер компоненты связности для вершины х (список смежных вершин)
long prov2(long x)
{
    if (p[x] == 1)
        return 0;
    //cout  << x << endl;
    p[x] = 1;
    long y = 1;
    for (i = 0; i < g[x].size(); i++)
    {
        if(p[g[x][i]] == 0)
        {
            y += prov2(g[x][i]);
        }
    }

    return y;
}

// размер компоненты связности для вершины х (матрица смежности)
long prov(long z)
{
    if (p[x] == 1)
        return 0;
    long i;
    queue <long> q;
    p[z] = 1;
    q.push(z);
    long c = 1;
    while(!q.empty())
    {
        long x = q.front();
        q.pop();
        for(i = 1; i <= v; i++)
            if(!p[i] && a[x][i])
            {
                q.push(i);
                p[i] = 1;
                c++;
            }
    }
    return c;
}

// кол-во компонент связности(матрица смежности)
long kompSize()
{
    for (i = 1; i <= v; i++)
        p[i] = 0;
    long k=0, i;
    for(i = 1; i <= v; i++)
    {
        if(!p[i])
        {
            prov(i);
            k++;
        }
    }
    return k;
}
// кол-во компонент связности(список смежных вершин)
long kompSize2()
{
    for (i = 1; i <= v; i++)
        p[i] = 0;
    long i, c = 0;
    for(i = 1; i <= v; i++)
    {
        if (prov2(i)) c++;
    }
    return c;
}
// поиск максимальной компонент связности(МС)
long maxKomp()
{
    for (i = 1; i <= v; i++)
        p[i] = 0;
    long Max = 0;
    for(i = 1; i <= v; i++)
    {
        long y = prov(i);
        Max = max(Max, y);
    }
    return Max;
}
//поиск максимальной компонент связности(ССВ)
long maxKomp2()
{
    for (i = 1; i <= v; i++)
        p[i] = 0;
    long Max = 0;
    for(i = 1; i <= v; i++)
    {
        long y = prov2(i);
        Max = max(Max, y);
    }
    return Max;
}

int main()
{
    ifstream fin("input.txt");
    ofstream fout("output.txt");
    fin >> v >> r;
    //cout << v << " " << r << endl;;


    for(i = 0; i < r; i++)
    {
        fin >> x >> y;
        a[x][y] = a[y][x] = 1;
        g[x].push_back(y);
        g[y].push_back(x);
    }
/*
    for(i = 1; i <= v; i++)
    {
        for(j = 1; j <= v; j++)
            cout << a[i][j] << ' ';
        cout << endl;
    }
    cout << endl << endl;


    for(i = 1; i <= v; i++)
    {
        cout << i << ": ";
        for(j = 0; j < g[i].size(); j++)
            cout << g[i][j] << ' ';
        cout << endl;
    }
    */

    //cout << prov(1) << endl << prov2(1);

   // cout << maxKomp2();
  //  for(i = 1; i <= v; i++) cout << p[i] << ' ';

    fin.close();
    fout.close();
    return 0;
}
