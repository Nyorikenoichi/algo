// Топологическая сортировка ориентированного графа

#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

long a[1001][1001], p[1001], b[1001], v, r, x, y, i, j;

vector <long> g[1001];
vector <long> pr[1001];

void ts(long x)
{
    p[x] = 1;
    for(long i = 0; i < pr[x].size(); i++)
    {
        if(!p[pr[x][i]])
        {
            ts(pr[x][i]);
        }
    }
    cout << x << ' ';
}
int main()
{
    ifstream fin("input.txt");
    ofstream fout("output.txt");
    fin >> v >> r;

    for(i = 0; i < r; i++)
    {
        fin >> x >> y;
        a[x][y] = 1;
        g[x].push_back(y);
        pr[y].push_back(x);
    }
    //Матрица смежности O(n^2)
    /*
    for (i = 1; i <= v; i++)
    {
        for (j = 1; j <= v; j++)
            b[j]+= a[i][j];
    }
    do
    {
        for(i = 1; i <= v && (b[i] > 0 || p[i]== 1); i++);
        if (i <= v)
        {
            p[i] = 1;
            cout << i << " ";
            for(j = 1; j <= v; j++)
                b[j] -= a[i][j];
        }
    }while(i <= v);
    */
    //ССВ O(n*m)
    for(i = 1; i <= v; i++)
    {
        if(!p[i])
        {
            ts(i);
        }
    }
    fin.close();
    fout.close();
    return 0;
}
// Вариант 2
#include <bits/stdc++.h>

using namespace std;

vector <long> g[5000];
vector <long> p;
long a, v, r, x, y;
bool c;

void dfsProverka(long x)
{
    p[x] = 1;
    for(long i = 0; i < g[x].size(); i++)
        if(p[ g[x][i] ] == 0)
            dfsProverka(g[x][i]);
        else if(p[ g[x][i] ] == y)
            c = 1;
    return;
}

void dfs(long x)
{
    if(p[x] != 0)
        return;
    p[x] = 1;
    for(long i = 0; i < g[x].size(); i++)
        if(p[ g[x][i] ] == 0)
            dfs(g[x][i]);
    cout << x << ' ';
    return;
}

int main()
{
    ios_base::sync_with_stdio(0);
    freopen("input.txt", "r", stdin);
    cin >> v >> r;
    p.resize(v);
    for(long i = 1; i <= v; i++)
        p[i] = 0;
    for(long i = 1; i <= r; i++)
    {
        cin >> x >> y;
        g[y].push_back(x);
    }
    y = 0;
    for(long i = 1; i <= v; i++)
    {
        if(p[i] != 0)
        {
            y++;
            dfsProverka(i);
        }
    }
    for(long i = 1; i <= v; i++)
        p[i] = 0;
    if(c)
        cout << -1;
    else for(long i = 1; i <= v; i++)
    {
        dfs(i);
    }
    return 0;
}
