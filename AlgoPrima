//минимальное остовное дерево и его вес методом Прима
#include <iostream>
#include <cstdio>
#include <queue>

using namespace std;

struct cmp
{
public:
    bool operator()(pair<long, long> a, pair<long, long> b)
    {
        return a.second > b.second;
    }
};

const long INF = 1000000000;
long n, m, x, y, z, i, j, ans = 0, start, finish, from;
vector < pair<long, long> > g[1002];
priority_queue < pair<long, long>, vector < pair<long, long> >, cmp > q;
vector <long> L, p, pr;

int main()
{
    freopen("input.txt", "r", stdin);
    /// freopen("output.txt", "w", stdout);
    cin >> n >> m;
    L.resize(n + 1); p.resize(n + 1); pr.resize(n + 1);
    for(i = 0; i < m; i++)
    {
        cin >> x >> y >> z;
        g[x].push_back(make_pair(y, z));
        g[y].push_back(make_pair(x, z));
    }
    start = 1; finish = n;
    for(i = 1; i <= n; i++)
    {
        L[i] = INF;
        p[i] = 0;
        pr[i] = 0;
    }
    L[start] = 0;
    q.push(make_pair(start, long(0)));
    while(!q.empty())
    {
        from = q.top().first; x = q.top().second;
        q.pop();
        if(p[from] == 0)
        {
            p[from] = 1;
            for(i = 0; i < g[from].size(); i++)
            {
                if(p[g[from][i].first] == 0 &&
                   L[g[from][i].first] > /*x +*/ g[from][i].second)
                {

                    L[g[from][i].first] = /*x +*/ g[from][i].second;
                    pr[g[from][i].first] = from;
                    q.push(make_pair(g[from][i].first, L[g[from][i].first]));
                }
            }
        }
    }
    for(i = 2; i <= n; i++)
    {
        cout << i << ' ' << pr[i] << endl;
        ans += L[i];
    }
    cout << ans;
    return 0;
}
