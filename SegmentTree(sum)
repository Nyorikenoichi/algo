#include <iostream>
#include <cmath>

using namespace std;

long long n, a[2000000], t[5000010], m, L, R;
char Q;

void b(long v, long tl, long tr)
{
    long tm = (tl + tr) / 2;
	if (tl == tr)
		t[v] = a[tl];
	else
    {
		b(v*2, tl, tm);
		b(v*2+1, tm+1, tr);
		t[v] = t[v*2] + t[v*2+1];
	}
}

long sum(long v, long tl, long tr, long l, long r)
{
    long tm = (tl + tr) / 2;
	if (l > r)
		return 0;
	if (l == tl && r == tr)
		return t[v];
	return sum(v*2, tl, tm, l, min(r,tm)) + sum(v*2+1, tm+1, tr, max(l,tm+1), r);
}

void upd(long v, long tl, long tr, long pos, long nv)
{
    if(tl == tr)
        t[v] = nv;
    else
    {
        long tm = (tl + tr) / 2;
        if (pos <= tm)
			upd(v*2, tl, tm, pos, nv);
		else
			upd(v*2+1, tm+1, tr, pos, nv);
		t[v] = t[v*2] + t[v*2+1];
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(long i = 0; i < n; i++)
        cin >> a[i];
    b(1, 0, n-1);
    for(long i = 0; i < m; i++)
    {
        cin >> Q >> L >> R;
        if(Q == '?')
            cout << sum(1, 0, n-1, L-1, R-1) << endl;
        else
            upd(1, 0, n-1, L-1, R);
    }
    return 0;
}
